package Sample.model;

/*Generated by MPS */

import javax.swing.JFrame;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;
import javax.swing.JTextField;
import java.util.random.RandomGenerator;
import javax.swing.Timer;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.GridLayout;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;

public class xPHHP extends JFrame {
  private DocumentListener listener = new DocumentListener() {
    @Override
    public void insertUpdate(DocumentEvent p1) {
      update();
    }

    @Override
    public void removeUpdate(DocumentEvent p1) {
      update();
    }

    @Override
    public void changedUpdate(DocumentEvent p1) {
      update();
    }
  };

  private JTextField inputField_a = new JTextField();
  private JTextField inputField_b = new JTextField();

  private JTextField outputField_a = new JTextField();
  private JTextField outputField_b = new JTextField();

  private RandomGenerator rand = RandomGenerator.of("Random");
  private int delay = 1000;
  private Timer timer;
  private int counter = 3;
  /*package*/ int j = counter;

  /*package*/ ActionListener act = new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent p1) {
      if (j == 0) {
        timer.stop();
        j = counter;
        timer = new Timer(delay, act);
        timer.setInitialDelay(0);
        timer.start();
      } else {
        update();
        j--;
      }
    }
  };

  public xPHHP() {
    setTitle("xPHHP");
    setLayout(new GridLayout(0, 2));
    inputField_a.getDocument().addDocumentListener(listener);
    add(new JLabel("Glucose"));
    add(inputField_a);
    inputField_b.getDocument().addDocumentListener(listener);
    add(new JLabel("Temp"));
    add(inputField_b);
    add(new JLabel("Output"));
    add(outputField_a);
    add(new JLabel("Output"));
    add(outputField_b);

    update();
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    pack();

    timer = new Timer(delay, act);
    timer.setInitialDelay(0);
    timer.start();

    setVisible(true);
  }

  public void update() {
    int i_a = 0;
    int i_b = 0;
    try {
      i_a = rand.nextInt(Integer.parseInt(inputField_a.getText()) * 3);
      i_b = rand.nextInt(Integer.parseInt(inputField_b.getText()) * 3);
    } catch (NumberFormatException e) {
    }
    outputField_a.setText("" + (i_a));
    outputField_b.setText("" + (i_b));
  }

  public static void main(String[] args) {
    SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        new xPHHP();
      }
    });
  }

}
