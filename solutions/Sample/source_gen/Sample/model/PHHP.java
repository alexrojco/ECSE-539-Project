package Sample.model;

/*Generated by MPS */

import javax.swing.JFrame;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;
import javax.swing.JButton;
import javax.swing.JProgressBar;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.JScrollPane;
import java.util.random.RandomGenerator;
import javax.swing.Timer;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.GroupLayout;
import java.time.LocalTime;
import javax.swing.SwingUtilities;

public class PHHP extends JFrame {
  private DocumentListener listener = new DocumentListener() {
    @Override
    public void insertUpdate(DocumentEvent p1) {
      update();
    }

    @Override
    public void removeUpdate(DocumentEvent p1) {
      update();
    }

    @Override
    public void changedUpdate(DocumentEvent p1) {
      update();
    }
  };

  private JButton action_a = new JButton("Eat");
  private JButton action_b = new JButton("Drink");
  private JProgressBar measurement_a = new JProgressBar(JProgressBar.VERTICAL);
  private JProgressBar measurement_b = new JProgressBar(JProgressBar.VERTICAL);
  private JProgressBar measurement_c = new JProgressBar(JProgressBar.VERTICAL);
  private JLabel measurementLabel_a = new JLabel("Glucose");
  private JLabel measurementLabel_b = new JLabel("Hydration");
  private JLabel measurementLabel_c = new JLabel("Temp ");
  private String triggerRule_a = "[CRITICAL] " + "Temp " + " is " + "above " + "40";
  private String triggerRule_b = "[INFO] " + "Hydration" + " is " + "below " + "200";


  private JTextArea logger = new JTextArea(7, 40);
  private JScrollPane loggerPane = new JScrollPane(logger);


  private final String newLine = "\n";
  private RandomGenerator rand = RandomGenerator.of("Random");
  private int delay = 1000;
  private Timer timer;
  private int counter = 3;
  /*package*/ int j = counter;

  /*package*/ ActionListener act = new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent p1) {
      if (j == 0) {
        timer.stop();
        j = counter;
        timer = new Timer(delay, act);
        timer.setInitialDelay(0);
        timer.start();
      } else {
        update();
        j--;
      }
    }
  };

  public PHHP() {
    setTitle("PHHP");
    setSize(300, 200);
    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);

    layout.setAutoCreateGaps(true);
    layout.setAutoCreateContainerGaps(true);

    logger.setLineWrap(true);
    logger.setEditable(false);

    action_a.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent p1) {
        measurement_a.setValue(measurement_a.getValue() + 25);
        measurement_a.setString(Integer.toString(measurement_a.getValue()));
      }
    });
    action_b.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent p1) {
        measurement_b.setValue(measurement_b.getValue() + 50);
        measurement_b.setString(Integer.toString(measurement_b.getValue()));
      }
    });
    measurement_a.setMinimum(0);
    measurement_a.setMaximum(300);
    measurement_a.setValue(0);
    measurement_a.setString(Integer.toString(measurement_a.getValue()));
    measurement_a.setStringPainted(true);
    measurement_b.setMinimum(0);
    measurement_b.setMaximum(100);
    measurement_b.setValue(100);
    measurement_b.setString(Integer.toString(measurement_b.getValue()));
    measurement_b.setStringPainted(true);
    measurement_c.setMinimum(35);
    measurement_c.setMaximum(42);
    measurement_c.setValue(38);
    measurement_c.setString(Integer.toString(measurement_c.getValue()));
    measurement_c.setStringPainted(true);


    GroupLayout.SequentialGroup hGroup = layout.createSequentialGroup();
    GroupLayout.ParallelGroup hGroup1 = layout.createParallelGroup();
    hGroup1.addComponent(action_a);
    hGroup1.addComponent(action_b);
    hGroup.addGroup(hGroup1);

    {
      GroupLayout.ParallelGroup hGroup2_a = layout.createParallelGroup();
      hGroup2_a.addComponent(measurement_a);
      hGroup2_a.addComponent(measurementLabel_a);
      hGroup.addGroup(hGroup2_a);
    }
    {
      GroupLayout.ParallelGroup hGroup2_b = layout.createParallelGroup();
      hGroup2_b.addComponent(measurement_b);
      hGroup2_b.addComponent(measurementLabel_b);
      hGroup.addGroup(hGroup2_b);
    }
    {
      GroupLayout.ParallelGroup hGroup2_c = layout.createParallelGroup();
      hGroup2_c.addComponent(measurement_c);
      hGroup2_c.addComponent(measurementLabel_c);
      hGroup.addGroup(hGroup2_c);
    }
    hGroup.addComponent(loggerPane);

    layout.setHorizontalGroup(hGroup);


    GroupLayout.ParallelGroup vGroup = layout.createParallelGroup();
    GroupLayout.SequentialGroup vGroup1 = layout.createSequentialGroup();
    vGroup1.addComponent(action_a);
    vGroup1.addComponent(action_b);
    vGroup.addGroup(vGroup1);

    {
      GroupLayout.SequentialGroup vGroup2_a = layout.createSequentialGroup();
      vGroup2_a.addComponent(measurement_a);
      vGroup2_a.addComponent(measurementLabel_a);
      vGroup.addGroup(vGroup2_a);
    }
    {
      GroupLayout.SequentialGroup vGroup2_b = layout.createSequentialGroup();
      vGroup2_b.addComponent(measurement_b);
      vGroup2_b.addComponent(measurementLabel_b);
      vGroup.addGroup(vGroup2_b);
    }
    {
      GroupLayout.SequentialGroup vGroup2_c = layout.createSequentialGroup();
      vGroup2_c.addComponent(measurement_c);
      vGroup2_c.addComponent(measurementLabel_c);
      vGroup.addGroup(vGroup2_c);
    }
    vGroup.addComponent(loggerPane);


    layout.setVerticalGroup(vGroup);

    update();
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    pack();

    timer = new Timer(delay, act);
    timer.setInitialDelay(0);
    timer.start();

    setVisible(true);
  }

  public void update() {
    measurement_a.setValue(measurement_a.getValue() + ((int) Math.ceil(((double) (RandomGenerator.of("Random").nextInt(10) * 300 / 200)))));
    measurement_a.setString(Integer.toString(measurement_a.getValue()));
    measurement_b.setValue(measurement_b.getValue() + ((int) Math.floor(((double) (RandomGenerator.of("Random").nextInt(10) * 100 / -200)))));
    measurement_b.setString(Integer.toString(measurement_b.getValue()));
    measurement_c.setValue(measurement_c.getValue() + (int) (RandomGenerator.of("Random").nextInt(10) / ((RandomGenerator.of("Random").nextBoolean() ? 200 : -200)) * 7));
    measurement_c.setString(Integer.toString(measurement_c.getValue()));
    int i;
    i = measurement_c.getValue();
    if (i >= 40) {
      logger.append(LocalTime.now() + ": " + triggerRule_a + newLine);
    }
    i = measurement_b.getValue();
    if (i <= 200) {
      logger.append(LocalTime.now() + ": " + triggerRule_b + newLine);
    }
    logger.setCaretPosition(logger.getDocument().getLength());
  }

  public static void main(String[] args) {
    SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        new PHHP();
      }
    });
  }

}
