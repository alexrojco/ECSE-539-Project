package NewLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Measurement_Constraints extends BaseConstraintsDescriptor {
  public Measurement_Constraints() {
    super(CONCEPTS.Measurement$IQ);
  }

  public static class Max_Property extends BasePropertyConstraintsDescriptor {
    public Max_Property(ConstraintsDescriptor container) {
      super(PROPS.max$QmHx, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castInteger(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:e6d2ff38-b034-4e8b-93ae-2b6fa2e66261(NewLanguage.constraints)", "771150834209963600"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, int propertyValue) {
      return propertyValue >= SPropertyOperations.getInteger(node, PROPS.min$wfiJ);
    }
  }
  public static class Min_Property extends BasePropertyConstraintsDescriptor {
    public Min_Property(ConstraintsDescriptor container) {
      super(PROPS.min$wfiJ, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castInteger(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:e6d2ff38-b034-4e8b-93ae-2b6fa2e66261(NewLanguage.constraints)", "771150834211102647"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, int propertyValue) {
      return propertyValue <= SPropertyOperations.getInteger(node, PROPS.max$QmHx);
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.max$QmHx, new Max_Property(this));
    properties.put(PROPS.min$wfiJ, new Min_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Measurement$IQ = MetaAdapterFactory.getConcept(0x16a79f2d7a8d4f36L, 0xae28276960b9e667L, 0xab3ad99153fd70fL, "NewLanguage.structure.Measurement");
  }

  private static final class PROPS {
    /*package*/ static final SProperty max$QmHx = MetaAdapterFactory.getProperty(0x16a79f2d7a8d4f36L, 0xae28276960b9e667L, 0xab3ad99153fd70fL, 0xab3ad99154c0022L, "max");
    /*package*/ static final SProperty min$wfiJ = MetaAdapterFactory.getProperty(0x16a79f2d7a8d4f36L, 0xae28276960b9e667L, 0xab3ad99153fd70fL, 0xab3ad99154bf7d0L, "min");
  }
}
